1. Donuts program
def donuts(count):
    if(count>=10):
        return "'Number of donuts: many'"
    else:
        return " 'Number of donuts:"+" "+ str(count)+"'"

count=int(input("enter the number of donuts:"))
print(donuts(count))

output:
enter the number of donuts:5
 'Number of donuts: 5'




2.last and first 2 characters in a string
def both_ends(s):
    l=len(s)
    if(l<2):
        return ' '
    else:
        
        return "'"+s[:2]+s[(l-2):]+"'"

s=input("enter the string:")
print(both_ends(s))
output:
enter the string:hemalatha
'heha'





3.replace() program
def replace(s):
    l=len(s)
    if(l>=1):
        return s[0]+s[1:].replace(s[0],'*')

s=input("enter the string:")
print(replace(s))
output:
enter the string:babble
ba**le





4.mix up program
def mix_up(s1,s2):
    l1=len(s1)
    l2=len(s2)
    if(l1>=2  and  l2>=2):
        return "'"+s2[0:2]+s1[2:]+" "+s1[0:2]+s2[2:]+"'"

s1=input("enter the 1st string:")
s2=input("enter the 2nd string:")
print(mix_up(s1,s2))
output:
enter the 1st string:hema
enter the 2nd string:latha
'lama hetha'



merging all the above functions into single program

# A. donuts
# Given an int count of a number of donuts, return a string
# of the form 'Number of donuts: <count>', where <count> is the number
# passed in. However, if the count is 10 or more, then use the word 'many'
# instead of the actual count.
# So donuts(5) returns 'Number of donuts: 5'
# and donuts(23) returns 'Number of donuts: many'
def donuts(count):
    if (count >= 10):
        return "'Number of donuts: many'"
    else:
        return " 'Number of donuts:" + " " + str(count) + "'"


# B. both_ends
# Given a string s, return a string made of the first 2
# and the last 2 chars of the original string,
# so 'spring' yields 'spng'. However, if the string length
# is less than 2, return instead the empty string.
def both_ends(s):
    l = len(s)
    if (l < 2):
        return ' '
    else:

        return "'" + s[:2] + s[(l - 2):] + "'"


# C. fix_start
# Given a string s, return a string
# where all occurences of its first char have
# been changed to '*', except do not change
# the first char itself.
# e.g. 'babble' yields 'ba**le'
# Assume that the string is length 1 or more.
# Hint: s.replace(stra, strb) returns a version of string s
# where all instances of stra have been replaced by strb.
def fix_start(s):
    l = len(s)
    if (l >= 1):
        return s[0] + s[1:].replace(s[0], '*')


# D. MixUp
# Given strings a and b, return a single string with a and b separated
# by a space '<a> <b>', except swap the first 2 chars of each string.
# e.g.
#   'mix', pod' -> 'pox mid'
#   'dog', 'dinner' -> 'dig donner'
# Assume a and b are length 2 or more.
def mix_up(s1, s2):
    l1 = len(s1)
    l2 = len(s2)
    if (l1 >= 2 and l2 >= 2):
        return "'" + s2[0:2] + s1[2:] + " " + s1[0:2] + s2[2:] + "'"


# Provided simple test() function used in main() to print
# what each function returns vs. what it's supposed to return.
def test(got, expected):
    if got == expected:
        prefix = ' OK '
    else:
        prefix = '  X '

    print('%s got: %s expected: %s' % (prefix, repr(got), repr(expected)))


# Provided main() calls the above functions with interesting inputs,
# using test() to check if each result is correct or not.
def main():

    print('donuts')
    # Each line calls donuts, compares its result to the expected for that call.
    test(donuts(4), 'Number of donuts: 4')
    test(donuts(9), 'Number of donuts: 9')
    test(donuts(10), 'Number of donuts: many')
    test(donuts(99), 'Number of donuts: many')


    print('both_ends')
    test(both_ends('spring'), 'spng')
    test(both_ends('Hello'), 'Helo')
    test(both_ends('a'), '')
    test(both_ends('xyz'), 'xyyz')

    print('fix_start')
    test(fix_start('babble'), 'ba**le')
    test(fix_start('aardvark'), 'a*rdv*rk')
    test(fix_start('google'), 'goo*le')
    test(fix_start('donut'), 'donut')


    print('mix_up')
    test(mix_up('mix', 'pod'), 'pox mid')
    test(mix_up('dog', 'dinner'), 'dig donner')
    test(mix_up('gnash', 'sport'), 'spash gnort')
    test(mix_up('pezzy', 'firm'), 'fizzy perm')


# Standard boilerplate to call the main() function.
if __name__ == '__main__':
    main()
 
output:
donuts
  X  got: " 'Number of donuts: 4'" expected: 'Number of donuts: 4'
  X  got: " 'Number of donuts: 9'" expected: 'Number of donuts: 9'
  X  got: "'Number of donuts: many'" expected: 'Number of donuts: many'
  X  got: "'Number of donuts: many'" expected: 'Number of donuts: many'
both_ends
  X  got: "'spng'" expected: 'spng'
  X  got: "'Helo'" expected: 'Helo'
  X  got: ' ' expected: ''
  X  got: "'xyyz'" expected: 'xyyz'
fix_start
 OK  got: 'ba**le' expected: 'ba**le'
 OK  got: 'a*rdv*rk' expected: 'a*rdv*rk'
 OK  got: 'goo*le' expected: 'goo*le'
 OK  got: 'donut' expected: 'donut'
mix_up
  X  got: "'pox mid'" expected: 'pox mid'
  X  got: "'dig donner'" expected: 'dig donner'
  X  got: "'spash gnort'" expected: 'spash gnort'
  X  got: "'fizzy perm'" expected: 'fizzy perm'


